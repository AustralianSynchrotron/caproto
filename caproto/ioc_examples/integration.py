import os
import sys
import time
import logging
import random

from caproto.benchmarking import set_logging_level
from caproto.curio.server import start_server
from caproto.curio.high_level_server import (pvproperty, PVGroupBase,
                                             pvfunction)


logger = logging.getLogger(__name__)


# Step 1: a caproto high-level server

class Group(PVGroupBase):
    'Example group of PVs, where the prefix is defined on instantiation'
    async def _exit(self, instance, value):
        logger.info('Server shutting down')
        sys.exit(0)

    exit = pvproperty(put=_exit, doc='Poke me to exit')

    @pvproperty
    async def random1(self, instance):
        'Random integer between 1 and 100'
        return random.randint(1, 100)

    @pvproperty
    async def random2(self, instance):
        'A nice random integer between 1000 and 2000'
        return random.randint(1000, 2000)

    @pvfunction(default=[0])
    async def get_random(self,
                         low: int=100,
                         high: int=1000) -> int:
        'A configurable random number'
        low, high = low[0], high[0]
        return random.randint(low, high)


# Step 2a: supporting methods to make simple ophyd Devices

def group_to_device(group):
    'Make an ophyd device from a high-level server PVGroup'
    # TODO subgroups are weak and need rethinking (generic comment deux)
    for name, subgroup in group._subgroups_.items():
        yield from group_to_device(subgroup.group_cls)

    if isinstance(group, PVGroupBase):
        group = group.__class__

    yield f"class {group.__name__}Device(ophyd.Device):"

    for name, subgroup in group._subgroups_.items():
        doc = f', doc={subgroup.__doc__!r}' if subgroup.__doc__ else ''
        yield f"    {name.lower()} = Cpt({name}Device, '{subgroup.prefix}'{doc})"

    if not group._pvs_:
        yield f'    ...'

    for name, prop in group._pvs_.items():
        if '.' in name:
            # Skipping, part of subgroup handled above
            continue

        pvspec = prop.pvspec
        doc = f', doc={pvspec.doc!r}' if pvspec.doc else ''
        yield f"    {name.lower()} = Cpt(EpicsSignal, '{pvspec.name}'{doc})"
        # TODO will break when full/macro-ified PVs is specified

    lower_name = group.__name__.lower()

    yield f"# {lower_name} = {group.__name__}(my_prefix)"
    yield ''


# Step 2b: copy/pasting the auto-generated output (OK, slightly modified for
#                                                  PEP8 readability)

import ophyd
from ophyd import Component as Cpt, EpicsSignal

# Auto-generated Device from here on:
# -----------------------------------


class get_randomDevice(ophyd.Device):
    low = Cpt(EpicsSignal, 'low', doc="Parameter <class 'int'> low")
    high = Cpt(EpicsSignal, 'high', doc="Parameter <class 'int'> high")
    status = Cpt(EpicsSignal, 'Status', doc="Parameter <class 'str'> Status")
    retval = Cpt(EpicsSignal, 'Retval',
                 doc="Parameter <class 'int'> Retval")
    process = Cpt(EpicsSignal, 'Process',
                  doc="Parameter <class 'int'> Process")
# get_random = get_random(my_prefix)

class GroupDevice(ophyd.Device):
    get_random = Cpt(get_randomDevice, 'get_random:',
                     doc='A configurable random number')
    exit = Cpt(EpicsSignal, 'exit', doc='Poke me to exit')
    random1 = Cpt(EpicsSignal, 'random1',
                  doc='Random integer between 1 and 100')
    random2 = Cpt(EpicsSignal, 'random2',
                  doc='A nice random integer between 1000 and 2000')
# group = Group(my_prefix)

# -------end autogenerated Devices---


if __name__ == '__main__':
    import curio
    from pprint import pprint

    try:
        prefix = sys.argv[1]
    except IndexError:
        prefix = 'integration:'

    ioc = Group(prefix=prefix, macros={})

    print('import ophyd')
    print('from ophyd import Component as Cpt, EpicsSignal')

    print('# Auto-generated Device from here on:')
    print('# -----------------------------------')

    for line in group_to_device(ioc):
        print(line)

    print('# -----------------------------------')

    if os.fork():
        # Run the server in the parent process

        set_logging_level(logging.INFO)
        logger.setLevel(logging.INFO)
        logging.basicConfig()

        logger.info('Starting up: prefix=%r', prefix)

        curio.run(start_server, ioc.pvdb)
    else:
        # And the ophyd client in the child process :)
        dev = GroupDevice(prefix=prefix, name='dev')
        print(dev, dev.read_attrs)
        dev.wait_for_connection()
        get_value = dev.get()

        print('Current values are:')
        print(get_value)
        time.sleep(5)

# This file auto-generated by `generate_headers.py`.
# Do not modify this file directly.
import ctypes


class _BaseMessageHeader(ctypes.BigEndianStructure):
    # just to define a nice repr
    def __repr__(self):
        d = {field: getattr(self, field) for field, _type in self._fields_}
        formatted_args = ", ".join(["{}={}".format(k, v)
                                    for k, v in d.items()])
        return "{}({})".format(type(self).__name__, formatted_args)


class MessageHeader(_BaseMessageHeader):
    """
    A Structure for the Header of a Channel Access command.

    The specification is documented at:
    http://www.aps.anl.gov/epics/base/R3-16/0-docs/CAproto/index.html#_messages
    """
    _fields_ = [("command", ctypes.c_uint16),
                ("payload_size", ctypes.c_uint16),
                ("data_type", ctypes.c_uint16),
                ("data_count", ctypes.c_uint16),
                ("parameter1", ctypes.c_uint32),
                ("parameter2", ctypes.c_uint32),
               ]


class ExtendedMessageHeader(_BaseMessageHeader):
    """
    A Structure for the Extended Header of a Channel Access command.

    The specification is documented at:
    http://www.aps.anl.gov/epics/base/R3-16/0-docs/CAproto/index.html#_messages
    """
    _fields_ = [("command", ctypes.c_uint16),
                ("marker1", ctypes.c_uint16),
                ("data_type", ctypes.c_uint16),
                ("marker2", ctypes.c_uint16),
                ("parameter1", ctypes.c_uint32),
                ("parameter2", ctypes.c_uint32),
                ("payload_size", ctypes.c_uint32),
                ("data_count", ctypes.c_uint32),
               ]


{% for command in commands %}
def {{command.name}}Header({{ command.input_params|map('attr', 'field')|join(', ') }}):
    """
    Construct a ``MessageHeader`` for a {{command.name}} command.

{{ command.description }}

    Parameters
    ----------
    {% for param in command.input_params %}
    {{ param.field }} : integer
        {{ param.description }}
    {% endfor %}
    """
    struct_args = ({{ command.struct_args|join(', ') }})
    return MessageHeader(*struct_args)

{% endfor %}

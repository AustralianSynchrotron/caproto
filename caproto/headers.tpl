# This file auto-generated by `generate_headers.py`.
# Do not modify this file directly.
import ctypes

class MessageHeader(ctypes.BigEndianStructure):
    _fields_ = [("command", ctypes.c_uint8),
                ("payload_size", ctypes.c_uint8),
                ("data_type", ctypes.c_uint8),
                ("data_count", ctypes.c_uint8),
                ("parameter1", ctypes.c_uint16),
                ("parameter2", ctypes.c_uint16),
               ]



class ExtendedMessageHeader(ctypes.BigEndianStructure):
    _fields_ = [("command", ctypes.c_uint16),
                ("marker1", ctypes.c_uint16),
                ("data_type", ctypes.c_uint16),
                ("marker2", ctypes.c_uint16),
                ("parameter1", ctypes.c_uint32),
                ("parameter2", ctypes.c_uint32),
                ("payload_size", ctypes.c_uint32),
                ("data_count", ctypes.c_uint32),
               ]


class Message:
    def __init__(self, header, payload=None):
        if payload is None:
            if header.payload_size != 0:
                raise ValueError("header.payload_size {} > 0 but payload is "
                                 "is None.".format(header.payload_size))
        elif header.payload_size != len(payload):
            raise ValueError("header.payload_size {} != len(payload) {}"
                             "".format(header.payload_size, payload))
        self.header = header
        self.payload = payload

    def __bytes__(self):
        return bytes(self.header) + bytes(self.payload)


{% for command in commands %}
def {{command.name}}({{ command.input_params|map('attr', 'field')|join(', ') }}):
    """
    Construct a ``MessageHeader`` for a {{command.name}} command.

{{ command.description }}

    Parameters
    ----------
    {% for param in command.input_params %}
      {{ param.field }} : integer
          {{ param.description }}
    {% endfor %}
    """
    struct_args = ({{ command.struct_args|join(', ') }})
    return MessageHeader(*struct_args)

{% endfor %}

# This file auto-generated by `generate_commands.py`.
# Do not modify this file directly.
import ctypes

class MessageHeader(ctypes.BigEndianStructure):
    _fields_ = [("command", ctypes.c_uint8),
                ("payload_size", ctypes.c_uint8),
                ("data_type", ctypes.c_uint8),
                ("data_count", ctypes.c_uint8),
                ("parameter1", ctypes.c_uint16),
                ("parameter2", ctypes.c_uint16),
               ]



class ExtendedMessageHeader(ctypes.BigEndianStructure):
    _fields_ = [("command", ctypes.c_uint16),
                ("marker1", ctypes.c_uint16),
                ("data_type", ctypes.c_uint16),
                ("marker2", ctypes.c_uint16),
                ("parameter1", ctypes.c_uint32),
                ("parameter2", ctypes.c_uint32),
                ("payload_size", ctypes.c_uint32),
                ("data_count", ctypes.c_uint32),
               ]


class Message:
    def __init__(self, header, payload=None):
        if payload is None:
            if header.payload_size != 0:
                raise ValueError("header.payload_size {} > 0 but payload is "
                                 "is None.".format(header.payload_size))
        elif header.payload_size != len(payload):
            raise ValueError("header.payload_size {} != len(payload) {}"
                             "".format(header.payload_size, payload))
        self.header = header
        self.payload = payload

    def __bytes__(self):
        return bytes(self.header) + bytes(self.payload)



def VersionRequest(priority, version):
    """
    Exchanges client and server protocol versions and desired circuit priority.
    This is the first message sent when a new TCP (Virtual Circuit) connection is established.
    Must be sent before any other exchange between client, server and repeater.
    The communication is not strictly request response, but will be perceived as such by the implementation.
    When a new TCP connection is established by the client, CA_PROTO_VERSION is sent.
    Likewise, the server will accept the connection and send the response form back.
    Sent over UDP or TCP.
		

    Parameters
    ----------
    
      priority : integer
          Virtual circuit priority.
    
      version : integer
          Minor protocol version number. Only used when sent over TCP.
    
    """
    struct_args = (0, 0, priority, version, 0, 0)
    return MessageHeader(*struct_args)


def VersionResponse(version):
    """
    Exchanges client and server protocol versions and desired circuit priority.
    This is the first message sent when a new TCP (Virtual Circuit) connection is established.
    Must be sent before any other exchange between client, server and repeater.
    The communication is not strictly request response, but will be perceived as such by the implementation.
    When a new TCP connection is established by the client, CA_PROTO_VERSION is sent.
    Likewise, the server will accept the connection and send the response form back.
    Sent over UDP or TCP.
		

    Parameters
    ----------
    
      version : integer
          Minor protocol version number. Only used when sent over TCP.
    
    """
    struct_args = (0, 0, 0, version, 0, 0)
    return MessageHeader(*struct_args)


def SearchRequest(payload_size, reply, version, cid):
    """
    Searches for a given channel name.
    Sent over UDP or TCP.
		

    Parameters
    ----------
    
      payload_size : integer
          Padded size of channel name.
    
      reply : integer
          Search Reply Flag
					(8.4.), indicating whether failed search response should be returned.
    
      version : integer
          Client minor protocol version number.
    
      cid : integer
          Client allocated CID.
    
    """
    struct_args = (6, payload_size, reply, version, cid, cid)
    return MessageHeader(*struct_args)


def SearchResponse(payload_size, data_type, sid, cid):
    """
    Searches for a given channel name.
    Sent over UDP or TCP.
		

    Parameters
    ----------
    
      payload_size : integer
          Payload size is constant.
    
      data_type : integer
          TCP Port number of server that responded.
    
      sid : integer
          Temporary SID, SID - Server ID
					(3.2.2.).
    
      cid : integer
          Channel CID, CID - Client ID
					(3.2.1.).
    
    """
    struct_args = (6, payload_size, data_type, 0, sid, cid)
    return MessageHeader(*struct_args)


def NotFoundResponse(reply_flag, version, cid):
    """
    Indicates that a channel with requested name does not exist.
    Sent in response to CA_PROTO_SEARCH
    		(4.6.), but only when its DO_REPLY flag was set.
    Sent over UDP.
		

    Parameters
    ----------
    
      reply_flag : integer
          Same reply flag as in request: always DO_REPLY.
    
      version : integer
          Client minor protocol version number.
    
      cid : integer
          CID of the channel.
    
    """
    struct_args = (14, 0, reply_flag, version, cid, cid)
    return MessageHeader(*struct_args)


def EchoRequest():
    """
    Connection verify used by CA_V43.
    Sent over TCP.
		

    Parameters
    ----------
    
    """
    struct_args = (23, 0, 0, 0, 0, 0)
    return MessageHeader(*struct_args)


def EchoResponse():
    """
    Connection verify used by CA_V43.
    Sent over TCP.
		

    Parameters
    ----------
    
    """
    struct_args = (23, 0, 0, 0, 0, 0)
    return MessageHeader(*struct_args)


def RsrvIsUpResponse(server_port, beaconid, address):
    """
    Beacon sent by a server when it becomes available.
    Beacons are also sent out periodically to announce the server is still alive.
    Another function of beacons is to allow detection of changes in network topology.
    Sent over UDP.
		

    Parameters
    ----------
    
      server_port : integer
          TCP Port the server is listening on.
    
      beaconid : integer
          Sequential Beacon ID.
    
      address : integer
          May contain IP address of the server.
    
    """
    struct_args = (13, 0, server_port, 0, beaconid, address)
    return MessageHeader(*struct_args)


def CaRepeaterConfirmResponse(repeater_address):
    """
    Confirms successful client registration with repeater.
    Sent over UDP.
		

    Parameters
    ----------
    
      repeater_address : integer
          Address with which the registration succeeded.
    
    """
    struct_args = (17, 0, 0, 0, 0, repeater_address)
    return MessageHeader(*struct_args)


def CaRepeaterRegisterRequest(client_ip_address):
    """
    Requests registration with the repeater.
    Repeater will confirm successful registration using CA_REPEATER_CONFIRM.
    Sent over TCP.
		

    Parameters
    ----------
    
      client_ip_address : integer
          IP address on which the client is listening
    
    """
    struct_args = (24, 0, 0, 0, 0, client_ip_address)
    return MessageHeader(*struct_args)


def EventAddRequest(payload_size, data_type, data_count, sid, subscriptionid):
    """
    Creates a subscription on a channel, allowing the client to be notified of changes in value.
    A request will produce at least one response.
    Sent over TCP.
		

    Parameters
    ----------
    
      payload_size : integer
          Payload size is constant
    
      data_type : integer
          Desired DBR type of the return value.
    
      data_count : integer
          Desired number of elements
    
      sid : integer
          
				SID of the channel on which to reqister this subscription.
				See SID - Server ID
					(3.2.2.).
			
    
      subscriptionid : integer
          
				Subscription ID identifying this subscription. 
				See Subscription ID
					(3.2.3.).
			
    
    """
    struct_args = (1, payload_size, data_type, data_count, sid, subscriptionid)
    return MessageHeader(*struct_args)


def EventAddResponse(payload_size, data_type, data_count, status_code, subscriptionid):
    """
    Creates a subscription on a channel, allowing the client to be notified of changes in value.
    A request will produce at least one response.
    Sent over TCP.
		

    Parameters
    ----------
    
      payload_size : integer
          Size of the response.
    
      data_type : integer
          Payload data type.
    
      data_count : integer
          Payload data count.
    
      status_code : integer
          Status code
					(13.) (ECA_NORMAL on success).
    
      subscriptionid : integer
          Subscription ID
    
    """
    struct_args = (1, payload_size, data_type, data_count, status_code, subscriptionid)
    return MessageHeader(*struct_args)


def EventCancelRequest(data_type, data_count, sid, subscriptionid):
    """
    Clears event subscription.
    This message will stop event updates for specified channel.
    Sent over TCP.
		

    Parameters
    ----------
    
      data_type : integer
          Same value as in corresponding CA_PROTO_EVENT_ADD
					(6.1.).
    
      data_count : integer
          Same value as in corresponding CA_PROTO_EVENT_ADD
					(6.1.).
    
      sid : integer
          Same value as in corresponding CA_PROTO_EVENT_ADD
					(6.1.).
    
      subscriptionid : integer
          Same value as in corresponding CA_PROTO_EVENT_ADD
					(6.1.).
    
    """
    struct_args = (2, 0, data_type, data_count, sid, subscriptionid)
    return MessageHeader(*struct_args)


def EventAddResponse(data_type, sid, subscriptionid):
    """
    Clears event subscription.
    This message will stop event updates for specified channel.
    Sent over TCP.
		

    Parameters
    ----------
    
      data_type : integer
          Same value as CA_PROTO_EVENT_ADD request.
    
      sid : integer
          Same value as CA_PROTO_EVENT_ADD request.
    
      subscriptionid : integer
          Same value as CA_PROTO_EVENT_ADD request.
    
    """
    struct_args = (1, 0, data_type, 0, sid, subscriptionid)
    return MessageHeader(*struct_args)


def ReadNotifyRequest(data_type, data_count, sid, ioid):
    """

		Read value of a channel.
		Sent over TCP.
		

Deprecated since protocol version 3.13.



    Parameters
    ----------
    
      data_type : integer
          Desired type of the return value.
    
      data_count : integer
          Desired number of elements to read.
    
      sid : integer
          SID of the channel to read.
    
      ioid : integer
          IOID of this operation.
    
    """
    struct_args = (3, 0, data_type, data_count, sid, ioid)
    return MessageHeader(*struct_args)


def ReadNotifyResponse(payload_size, data_type, data_count, sid, ioid):
    """

		Read value of a channel.
		Sent over TCP.
		

Deprecated since protocol version 3.13.



    Parameters
    ----------
    
      payload_size : integer
          Size of DBR formatted data in payload.
    
      data_type : integer
          Payload format.
    
      data_count : integer
          Payload element count.
    
      sid : integer
          SID of the channel.
    
      ioid : integer
          IOID of this operation.
    
    """
    struct_args = (3, payload_size, data_type, data_count, sid, ioid)
    return MessageHeader(*struct_args)


def WriteRequest(payload_size, data_type, data_count, sid, ioid):
    """
    Writes new channel value.
    Sent over TCP.
		

    Parameters
    ----------
    
      payload_size : integer
          Size of padded payload
    
      data_type : integer
          Format of payload
    
      data_count : integer
          Number of elements in payload
    
      sid : integer
          Server channel ID
    
      ioid : integer
          Request ID
    
    """
    struct_args = (4, payload_size, data_type, data_count, sid, ioid)
    return MessageHeader(*struct_args)


def EventsOffRequest():
    """
    Disables a server from sending any subscription updates over this virtual circuit.
    Sent over TCP.
    This mechanism is used by clients with slow CPU to prevent congestion when they are unable to handle all updates recived.
    Effective automated handling of flow control is beyond the scope of this document.
		

    Parameters
    ----------
    
    """
    struct_args = (8, 0, 0, 0, 0, 0)
    return MessageHeader(*struct_args)


def EventsOnRequest():
    """
    Enables the server to resume sending subscription updates for this virtual circuit.
    Sent over TCP.
    This mechanism is used by clients with slow CPU to prevent congestion when they are unable to handle all updates recived.
    Effective automated handling of flow control is beyond the scope of this document.
		

    Parameters
    ----------
    
    """
    struct_args = (9, 0, 0, 0, 0, 0)
    return MessageHeader(*struct_args)


def ReadSyncRequest():
    """
Deprecated since protocol version 3.13.


    Parameters
    ----------
    
    """
    struct_args = (10, 0, 0, 0, 0, 0)
    return MessageHeader(*struct_args)


def ErrorResponse(payload_size, cid, status_code):
    """
    Sends error message and code.
    This message is only sent from server to client in response to any request that fails and does not include error code in response.
    This applies to all asynchronous commands.
    Error message will contain a copy of original request and textual description of the error.
    Sent over UDP.
		

    Parameters
    ----------
    
      payload_size : integer
          Size of the request header that triggered the error plus size of the error message.
    
      cid : integer
          CID of the channel for which request failed, CID - Client ID
					(3.2.1.).
    
      status_code : integer
          Error status code
					(13.).
    
    """
    struct_args = (11, payload_size, 0, 0, cid, status_code)
    return MessageHeader(*struct_args)


def ClearChannelRequest(sid, cid):
    """
    Clears a channel.
    This command will cause server to release the associated channel resources and no longer accept any requests for this SID/CID.
		

    Parameters
    ----------
    
      sid : integer
          SID of channel to clear.
    
      cid : integer
          CID of channel to clear.
    
    """
    struct_args = (12, 0, 0, 0, sid, cid)
    return MessageHeader(*struct_args)


def ClearChannelResponse(sid, cid):
    """
    Clears a channel.
    This command will cause server to release the associated channel resources and no longer accept any requests for this SID/CID.
		

    Parameters
    ----------
    
      sid : integer
          SID of cleared channel.
    
      cid : integer
          CID of cleared channel.
    
    """
    struct_args = (12, 0, 0, 0, sid, cid)
    return MessageHeader(*struct_args)


def ReadNotifyRequest(data_type, data_count, sid, ioid):
    """
		Read value of a channel.
		Sent over TCP.
	

    Parameters
    ----------
    
      data_type : integer
          Desired type of the return value.
    
      data_count : integer
          Desired number of elements to read.
    
      sid : integer
          SID of the channel to read.
    
      ioid : integer
          IOID of this operation.
    
    """
    struct_args = (15, 0, data_type, data_count, sid, ioid)
    return MessageHeader(*struct_args)


def ReadNotifyResponse(payload_size, data_type, data_count, sid, ioid):
    """
		Read value of a channel.
		Sent over TCP.
	

    Parameters
    ----------
    
      payload_size : integer
          Size of DBR formatted data in payload.
    
      data_type : integer
          Payload format.
    
      data_count : integer
          Payload element count.
    
      sid : integer
          SID of the channel.
    
      ioid : integer
          IOID of this operation.
    
    """
    struct_args = (15, payload_size, data_type, data_count, sid, ioid)
    return MessageHeader(*struct_args)


def CreateChanRequest(payload_size, cid, client_version):
    """
    Requests creation of channel.
    Server will allocate required resources and return initialized SID.
    Sent over TCP.
		

    Parameters
    ----------
    
      payload_size : integer
          Padded length of channel name.
    
      cid : integer
          CID of the channel to create.
    
      client_version : integer
          Client minor protocol version.
    
    """
    struct_args = (18, payload_size, 0, 0, cid, client_version)
    return MessageHeader(*struct_args)


def CreateChanResponse(payload_size, data_type, data_count, cid, sid):
    """
    Requests creation of channel.
    Server will allocate required resources and return initialized SID.
    Sent over TCP.
		

    Parameters
    ----------
    
      payload_size : integer
          Must be 0
    
      data_type : integer
          Native channel data type
    
      data_count : integer
          Native channel data count
    
      cid : integer
          Channel client ID
    
      sid : integer
          Channel server ID
    
    """
    struct_args = (18, payload_size, data_type, data_count, cid, sid)
    return MessageHeader(*struct_args)


def WriteNotifyRequest(payload_size, data_type, data_count, sid, ioid):
    """
    Writes new channel value.
    Sent over TCP.
		

    Parameters
    ----------
    
      payload_size : integer
          Size of padded payload
    
      data_type : integer
          Format of payload
    
      data_count : integer
          Number of elements in payload
    
      sid : integer
          Server channel ID
    
      ioid : integer
          Request ID
    
    """
    struct_args = (19, payload_size, data_type, data_count, sid, ioid)
    return MessageHeader(*struct_args)


def WriteNotifyResponse(payload_size, data_type, data_count, status, ioid):
    """
    Writes new channel value.
    Sent over TCP.
		

    Parameters
    ----------
    
      payload_size : integer
          Must be 0
    
      data_type : integer
          Format of data written
    
      data_count : integer
          Number of elements written
    
      status : integer
          Status of write success
    
      ioid : integer
          Request ID
    
    """
    struct_args = (19, payload_size, data_type, data_count, status, ioid)
    return MessageHeader(*struct_args)


def ClientNameRequest(payload_size):
    """
    Sends local username to virtual circuit peer. 
    This name identifies the user and affects access rights.
		

    Parameters
    ----------
    
      payload_size : integer
          Length of string in payload
    
    """
    struct_args = (20, payload_size, 0, 0, 0, 0)
    return MessageHeader(*struct_args)


def HostNameRequest(payload_size):
    """
    Sends local host name to virtual circuit peer.
    This name will affect access rights.
    Sent over TCP.
		

    Parameters
    ----------
    
      payload_size : integer
          Length of host name string.
    
    """
    struct_args = (21, payload_size, 0, 0, 0, 0)
    return MessageHeader(*struct_args)


def AccessRightsResponse(cid, access_rights):
    """
    Notifies of access rights for a channel.
    This value is determined based on host and client name and may change during runtime.
    Client cannot change access rights nor can it explicitly query its value, so last received value must be stored.
		

    Parameters
    ----------
    
      cid : integer
          Channel affected by change.
    
      access_rights : integer
          Access rights
					(8.5.) for given channel.
    
    """
    struct_args = (22, 0, 0, 0, cid, access_rights)
    return MessageHeader(*struct_args)


def CreateChFailResponse(cid):
    """
    Reports that channel creation failed.
    This response is sent to when channel creation in CA_PROTO_CREATE_CHAN fails.
		

    Parameters
    ----------
    
      cid : integer
          Client channel ID
    
    """
    struct_args = (26, 0, 0, 0, cid, 0)
    return MessageHeader(*struct_args)


def ServerDisconnResponse(cid):
    """
    Notifies the client that server has disconnected the channel.
    This may be since the channel has been destroyed on server.
    Sent over TCP.
		

    Parameters
    ----------
    
      cid : integer
          CID that was provided during CA_PROTO_CREATE_CHAN
    
    """
    struct_args = (27, 0, 0, 0, cid, 0)
    return MessageHeader(*struct_args)

